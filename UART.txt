/************************************************************************/
/*The aim of the program is to read ADC and perform serial communication*/
/*between 2 tm4c123gh6pm boards and make the LEDs in Rx to glow accordingly*/
/*Shanmathi Rajasekar and Monica Nethagani             Pot value - 20k Ohm*/
/*02-October-2017*/
/*The analog value by a Potentiometer of resistance 20K is sensed by an analog*/
/*PE3 continuously in one board. The values are serially transmitted through*/
/*UART1. The receiver board receives the value and according to the input,*/
/* the output LEDs are switched ON or OFF.When voltage is 0, all the LEDs*/
/*are turned OFF and when input is maximum, all LEDs are turned ON.Similarly*/
/*when voltage input is half of its maximum, 5 LEDs are turned ON. The ADC*/
/*and UART registers are set accordingly.*/
/************************************************************************/
#include<stdint.h>
#include<stdbool.h>
#include"inc/hw_memmap.h"
#include"driverlib/gpio.h"
#include"inc/hw_types.h"
#include"driverlib/debug.h"
#include"driverlib/sysctl.h"
#include"driverlib/adc.h"
#include"driverlib/pin_map.h"
#include"driverlib/uart.h"
#include "driverlib/interrupt.h"
#include "inc/tm4c123gh6pm.h"
/************************************************************************/
/*Receiver and Transmitter Boards defined*/
/************************************************************************/
#define GPIO_PB0_U1RX 0x00010001
#define GPIO_PB1_U1TX 0x00010401
/************************************************************************/
/*Initialization of global variables for Tx and Rx Boards*/
/************************************************************************/
uint32_t ui32ADC0Value[1];
int lsb;
int msb;
int val1;
int val2;
int n;
int ack;
int n1;
unsigned int UART_flag=0;
/************************************************************************/
/*UartRxIntHandler - Interrupt Service Routine for UART Rx Interrupt*/
/*Change subroutine name to UARTRxIntHandler for Uart1 Rx and Tx in */
/*#pragma DATA_SECTION(g_pfnVectors, ".intvecs") and add function declaration */
/*in tm4c123gh6pm_startup_ccs.c*/
/************************************************************************/
void UARTRxIntHandler(void){
    uint32_t rx_int= UARTIntStatus(UART1_BASE,true);
    UART_flag =1;
    UARTIntClear(UART1_BASE,rx_int);
}
/************************************************************************/
/*Main Function:The Peripherals are enabled and initialization of ADC,UART*/
/*and Interrupt are done. Both Tx and Rx codes are written in same program*/
/*It checks GPIO- PD3- if high, the TX part will run else RX will execute*/
/*The Transmitter board reads continuous potentiometer value and transmits*/
/*the read value as 2 bytes of data.It receives ACK (Blue LED glows) on */
/*correct transmission which is given by Rx board to Tx board. The receiver*/
/*board receives the Potentiometer value as 2 bytes and concatenates and the*/
/*appropriate LEDs are turned ON.*/
/*Input Pins- PE3 (potentiometer value Read), PD3(Tx or Rx),PBO & PB1(Rx&Tx*/
/*Pin) Output Pins-PF4,PA3,PD6,PC7,PC6,PB7,PC4,PB2,PF3 and PF2 (Rx LEDs), */
/*PF2 in Tx board for indicating Acknowledgment*/
/************************************************************************/
int main(void){
   SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);//System Clock at 40MHz
   SysCtlPeripheralEnable(SYSCTL_PERIPH_UART1);//UART1 enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);//ADC0 enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);//Port A enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);//Port B enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);//Port C enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);//Port D enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);//Port F enable
   SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);//Port E enable
   
   GPIOPinConfigure(GPIO_PB0_U1RX);//PB0 is set as Rx
   GPIOPinConfigure(GPIO_PB1_U1TX);//PB1 is set as Tx
   GPIOPinTypeUART(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);//UART input pins
   GPIOPinTypeGPIOInput(GPIO_PORTD_BASE,GPIO_PIN_3);//Input PD3
   GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE,GPIO_PIN_3);//Output PA3
   GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7);//Output PB2,PB7
   GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4);//Output PC7,PC6,PC4
   GPIOPinTypeGPIOOutput(GPIO_PORTD_BASE,GPIO_PIN_6);//Output PD6
   GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2);//Output PF4,PF3,PF2
   GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_2, 0x00);//initialize ACK LED to 0
   
   UARTConfigSetExpClk(UART1_BASE, SysCtlClockGet(), 115200,(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
   //Configure UART1, 115200 Baud rate,8 Data bits,
   GPIOPinTypeADC(GPIO_PORTE_BASE,GPIO_PIN_3);// Enable ADC0 module
   ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_ALWAYS, 0);//Configure ADC module, 1Sampling,Trigger type
   ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_CH0);//ADC0 with 1 sampling,0 Step,input from Channel 0
   ADCSequenceEnable(ADC0_BASE, 1);//Enable Sequencer
   IntMasterEnable();//Enable Int
   IntEnable(INT_UART1);//Enable INT_UART1
   UARTIntEnable(UART1_BASE,UART_INT_RX);//Enable Int for Rx
   UARTEnable(UART1_BASE);//Enable Int for UART1

   while(1){
      if(GPIOPinRead(GPIO_PORTD_BASE,GPIO_PIN_3))//Checks GPIO PD3 is logic 1 or 0
         {
         //Code for Transmitter
         ADCIntClear(ADC0_BASE, 1);//Interrupt flag is cleared
         ADCProcessorTrigger(ADC0_BASE, 1);//Trigger given to ADC0
         ADCSequenceDataGet(ADC0_BASE, 1, ui32ADC0Value);//Converted value in ui32ADC0Value
         msb=ui32ADC0Value[1]/100;//As data is 8 bits, MSB 1 byte is separated
         UARTCharPut(UART1_BASE,msb);//MSB transmitted
         lsb=ui32ADC0Value[1]%100;//LSB separated
         UARTCharPut(UART1_BASE,lsb);//LSB transmitted
         ack=UARTCharGet(UART1_BASE);//Gets ACK from RX and the value is stored in ack
         // Checks for ACK and NACK condition
         if (ack==lsb) GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_2, 0x04);//PF2 ON - ACK
         else
            GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_2, 0x00);//PF2 OFF - NACK
         }
      else{
         //Code for Receiver
         val1= UARTCharGet(UART1_BASE);//First, MSB received
         val2= UARTCharGet(UART1_BASE);//LSB received
         n1=(val1*100)+val2;//Both bytes are concatenated
         n=n1/409;//409 is used to scale the raw data to a 0-10 scale
         switch(n){
             case 0: {
                //all LEDs are switched off
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 1: {
                //only PF4 is turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 2: {//only PF4,PA3 are turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 3: {
                //only PF4,PA3,PD6 are turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 4: {
                //only PF4,PA3,PD6,PC7 are turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7, 0x80);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 5: {
                //only PF4,PA3,PD6,PC7,PC6 are turned ON (half numbers of LEDs are turned On)
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6, 0xC0);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 6: {
                //only PF4,PA3,PD6,PC7,PC6,PB7 are turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6, 0xE0);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_7, 0x80);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 7: {
                //only PF4,PA3,PD6,PC7,PC6,PB7,PC4 are turned ON
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0xF0);
                GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_7, 0x80);
                UARTCharPut(UART1_BASE,val2);
                break;
                }
             case 8: {
                 //only PF4,PA3,PD6,PC7,PC6,PB7,PC4,PB2 are turned ON
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4, 0x10);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0xF0);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x84);
                 UARTCharPut(UART1_BASE,val2);
                 break;
                 }
              case 9:{
                 //only PF4,PA3,PD6,PC7,PC6,PB7,PC4,PB2,PF3 are turned ON
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3, 0x18);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4, 0xF0);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x84);
                 UARTCharPut(UART1_BASE,val2);
                 break;
                 }
              case 10: {
                 //PF4,PA3,PD6,PC7,PC6,PB7,PC4,PB2,PF3 and PF2 are turned ON(all 10 LED's) indicating input is 3.3v
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x00);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x00);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x00);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0x00);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x00);
                 GPIOPinWrite(GPIO_PORTA_BASE,GPIO_PIN_3, 0x08);
                 GPIOPinWrite(GPIO_PORTD_BASE,GPIO_PIN_6, 0x40);
                 GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2, 0x1C);
                 GPIOPinWrite(GPIO_PORTC_BASE,GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4, 0xF0);
                 GPIOPinWrite(GPIO_PORTB_BASE,GPIO_PIN_2|GPIO_PIN_7, 0x84);
                 UARTCharPut(UART1_BASE,val2);
                 break;
               }
            }
         }
      }
   }





